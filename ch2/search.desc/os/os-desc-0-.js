searchState.loadedDescShard("os", 0, "The main module and entrypoint\nbatch subsystem\nclear BSS segment\nSBI console driver, for text output\nThe panic handler\nGlobal logger\nPrint! to the host console using the format string and …\nPrintln! to the host console using the format string and …\nthe rust entry-point of os\nSBI call wrappers\nSynchronization and interior mutability primitives\nImplementation of syscalls\nTrap handling functionality\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ninit batch subsystem\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nprint apps info\nrun next app\nRISCV64 configuration\nAddress of the sifive_test mapped device.\nExit with specified return code.\nExit qemu with specified exit code.\nEncode the exit code using EXIT_FAILURE_FLAG.\nExit QEMU using <code>EXIT_FAILURE</code>, aka <code>1</code>.\nExit QEMU using <code>EXIT_SUCCESS</code>, aka <code>0</code>, if possible.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an instance.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\npanic handler\na simple logger\nReturns the argument unchanged.\ninitiate logger\nCalls <code>U::from(self)</code>.\nuse sbi call to putchar in console (qemu uart handler)\ngeneral sbi call\nuse sbi call to shutdown the kernel\nWrap a static data structure inside it so that we are able …\ninner data\nUniprocessor interior mutability primitives\nWrap a static data structure inside it so that we are able …\nPanic if the data has been borrowed.\nReturns the argument unchanged.\ninner data\nCalls <code>U::from(self)</code>.\nUser is responsible to guarantee that inner struct is only …\nexit syscall\nwrite syscall\nFile and filesystem-related syscalls\nApp management syscalls\nhandle syscall exception with <code>syscall_id</code> and other …\nwrite buf of length <code>len</code>  to a file with <code>fd</code>\ntask exits and submit an exit code\nTrap Context\ninitialize CSR <code>stvec</code> as the entry of <code>__alltraps</code>\nCSR sepc\nCSR sstatus      \nhandle an interrupt, exception, or system call from user …\ngeneral regs[0..31]\nTrap Context\ninit app context\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCSR sepc\nset stack pointer to x_2 reg (sp)\nCSR sstatus      \ngeneral regs[0..31]")